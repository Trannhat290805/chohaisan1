from django.shortcuts import render, redirect, get_object_or_404
from .models import Product
from .forms import ProductForm
from .models import DiemDanh
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Attendance, Wallet
from datetime import date, timedelta
from django.contrib.auth import authenticate, login
from django.template.loader import select_template
from django.utils.translation import get_language
from .models import Category
from django.db.models import Q
from django.contrib.auth.models import User


def all_promotion_products(request):
    # Ch·ªçn c√°c s·∫£n ph·∫©m c√≥ gi·∫£m gi√°
    promotion_products = Product.objects.filter(discount_percent__gt=0)
    return render(request, 'products/all_promotions.html', {'products': promotion_products})


def slider_view(request):
    products = Product.objects.all()[:10]
    return render(request, 'slider.html', {'products': products})

def product_by_category(request, category_slug):
    category = get_object_or_404(Category, slug=category_slug)
    products = Product.objects.filter(category=category)
    return render(request, 'products/category_page.html', {
        'category': category,
        'products': products
    })

def product_list(request):
    query = request.GET.get('q')
    category_id = request.GET.get('category')  # l·∫•y id danh m·ª•c t·ª´ URL (?category=1)

    # L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c (ƒë·ªÉ hi·ªÉn th·ªã menu)
    categories = Category.objects.all()

    if query:
        related_products = Product.objects.filter(name__icontains=query).order_by('-id')
        return render(request, 'products/product_list.html', {
            'search_mode': True,
            'related_products': related_products,
            'categories': categories,
        })
    
    elif category_id:
        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn danh m·ª•c ‚Üí l·ªçc s·∫£n ph·∫©m theo danh m·ª•c ƒë√≥
        products_by_category = Product.objects.filter(category_id=category_id).order_by('-id')
        return render(request, 'products/product_list.html', {
            'search_mode': False,
            'products_by_category': products_by_category,
            'categories': categories,
        })
    
    else:
        # M·∫∑c ƒë·ªãnh (hi·ªÉn th·ªã danh m·ª•c n·ªïi b·∫≠t nh∆∞ hi·ªán t·∫°i)
        bestsellers = Product.objects.filter(category='bestseller').order_by('-id')
        shellfish = Product.objects.filter(category='shellfish').order_by('-id')
        frozen = Product.objects.filter(category='frozen').order_by('-id')
        promotion = Product.objects.filter(category='promotion').order_by('-id')
        sushi = Product.objects.filter(category='sushi').order_by('-id')
        tuoisong = Product.objects.filter(category='tuoisong').order_by('-id')
        nhapkhau = Product.objects.filter(category='nhapkhau').order_by('-id')
        cahoi = Product.objects.filter(category='cahoi').order_by('-id')
        hausua = Product.objects.filter(category='hausua').order_by('-id')
        cuaghe = Product.objects.filter(category='cuaghe').order_by('-id')
        tom = Product.objects.filter(category='tom').order_by('-id')
        muc = Product.objects.filter(category='muc').order_by('-id')
        eat = Product.objects.filter(category='eat').order_by('-id')
        giavi = Product.objects.filter(category='giavi').order_by('-id')
        return render(request, 'products/product_list.html', {
            'search_mode': False,
            'bestsellers': bestsellers,
            'shellfish': shellfish,
            'frozen': frozen,
            'promotion': promotion,
            'sushi': sushi,
            'tuoisong': tuoisong,
            'nhapkhau': nhapkhau,
            'cahoi': cahoi,
            'hausua': hausua,
            'cuaghe': cuaghe,
            'tom': tom,
            'muc': muc,
            'eat': eat,
            'giavi': giavi,
            'categories': categories,
        })


def add_to_cart(request, product_id):
    cart = request.session.get('cart', {})
    cart[product_id] = cart.get(product_id, 0) + 1
    request.session['cart'] = cart
    return redirect('view_cart')

def view_cart(request):
    cart = request.session.get('cart', {})
    cart_items = []
    total_price = 0

    for product_id, quantity in cart.items():
        product = get_object_or_404(Product, id=product_id)
        item_total = product.price * quantity
        total_price += item_total
        cart_items.append({
            'product': product,
            'quantity': quantity,
            'total_price': item_total,
        })

    return render(request, 'products/cart.html', {
        'cart_items': cart_items,
        'total_price': total_price,
    })

def update_cart(request, product_id):
    if request.method == 'POST':
        action = request.POST.get('action')
        cart = request.session.get('cart', {})

        if str(product_id) in cart:
            if action == 'increase':
                cart[str(product_id)] += 1
            elif action == 'decrease':
                if cart[str(product_id)] > 1:
                    cart[str(product_id)] -= 1
                else:
                    cart.pop(str(product_id))
        
        request.session['cart'] = cart
    return redirect('view_cart')

def remove_from_cart(request, product_id):
    cart = request.session.get('cart', {})
    if str(product_id) in cart:
        del cart[str(product_id)]
        request.session['cart'] = cart
    return redirect('view_cart')

@login_required
def add_product(request):
    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES)
        if form.is_valid():
            product = form.save(commit=False)
            product.user = request.user  # üü¢ ƒê√¢y l√† d√≤ng QUAN TR·ªåNG b·∫°n thi·∫øu
            product.save()
            return redirect('product_list')  # ho·∫∑c trang b·∫°n mu·ªën
    else:
        form = ProductForm()
    return render(request, 'products/add_product.html', {'form': form})

def purchase_product(request, product_id):
    # T·∫°m th·ªùi ch·ªâ tr·∫£ v·ªÅ trang th√†nh c√¥ng ƒë∆°n gi·∫£n
    return render(request, 'products/purchase_success.html', {'product_id': product_id})

def upload_product(request):
    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES)  # nh·∫≠n c·∫£ ·∫£nh
        if form.is_valid():
            form.save()
            return redirect('product_list')  # ƒêƒÉng xong quay v·ªÅ trang shop h·∫£i s·∫£n
    else:
        form = ProductForm()
    return render(request, 'products/upload_product.html', {'form': form})



@login_required
def diem_danh(request):
    attendance, created = Attendance.objects.get_or_create(user=request.user)
    today = date.today()
    message = ""
    reward = 0

    if request.method == "POST":
        if attendance.last_check_in == today:
            message = "B·∫°n ƒë√£ ƒëi·ªÉm danh h√¥m nay r·ªìi!"
        else:
            if attendance.last_check_in and (today - attendance.last_check_in).days == 1:
                attendance.streak += 1
            else:
                attendance.streak = 1  # Reset n·∫øu b·ªè ng√†y

            attendance.current_day += 1
            attendance.last_check_in = today

            # Ph·∫ßn th∆∞·ªüng
            if attendance.streak == 7:
                reward = 1000
                attendance.streak = 0  # Reset sau 7 ng√†y li√™n ti·∫øp
            else:
                reward = 200

            attendance.coins += reward
            attendance.save()

            message = f"B·∫°n ƒë√£ nh·∫≠n {reward} xu! T·ªïng xu hi·ªán t·∫°i: {attendance.coins} xu."

    days = []
    for day in range(1, 8):
        checked_in = day <= attendance.current_day
        days.append({
            'day': day,
            'checked_in': checked_in,
        })

    context = {
        'days': days,
        'message': message,
        'attendance': attendance,
        'today': today,
    }
    return render(request, 'attendance.html', context)



def vi_tien(request):
    return render(request, 'vi_tien.html')

@login_required
def checkout(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    user = request.user

    context = {
        'product': product,
        'user': user,
        'total_price': product.price,
    }
    return render(request, 'products/checkout.html', context)

def dat_hang(request):
    if request.method == 'POST':
        try:
            # L·∫•y gi·ªè h√†ng t·ª´ session
            cart = request.session.get('cart', {})

            for product_id, quantity in cart.items():
                product = Product.objects.get(id=product_id)
                product.sold += quantity  # ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ b√°n
                product.save()

            # Xo√° gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
            request.session['cart'] = {}

            messages.success(request, 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!')
            return redirect('product_list')

        except Exception as e:
            messages.error(request, 'Xin l·ªói qu√Ω kh√°ch v√¨ s·ª± c·ªë! ƒê·∫∑t h√†ng th·∫•t b·∫°i.')
            return redirect('product_list')
    else:
        messages.error(request, 'Ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá!')
        return redirect('product_list')

    
def cart_view(request):
    cart = request.session.get('cart', {})
    cart_items = []
    total_price = 0

    for product_id, quantity in cart.items():
        product = get_object_or_404(Product, id=product_id)
        item_total = product.price * quantity
        total_price += item_total
        cart_items.append({
            'product': product,
            'quantity': quantity,
            'total_price': item_total,
        })

    return render(request, 'cart.html', {
        'cart_items': cart_items,
        'total_price': total_price,
    })


def some_view(request):
    context = {}
    if request.user.is_authenticated:
        try:
            context['attendance'] = Attendance.objects.get(user=request.user)
        except Attendance.DoesNotExist:
            context['attendance'] = None
    return render(request, 'your_template.html', context)



@login_required
def login_view(request):
    lang = get_language()
    template_name = f"{lang}/login.html" if lang else "login.html"

    username_error = None
    password_error = None

    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        # Ki·ªÉm tra user t·ªìn t·∫°i ch∆∞a
        try:
            user_obj = User.objects.get(username=username)
        except User.DoesNotExist:
            # User kh√¥ng t·ªìn t·∫°i
            username_error = "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i"
            return render(request, template_name, {
                'username_error': username_error,
            })

        # N·∫øu t·ªìn t·∫°i, ki·ªÉm tra m·∫≠t kh·∫©u
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            next_url = request.GET.get('next', '/')
            return redirect(next_url)
        else:
            # Sai m·∫≠t kh·∫©u
            password_error = "Sai m·∫≠t kh·∫©u"
            return render(request, template_name, {
                'password_error': password_error,
                'username': username,  # gi·ªØ l·∫°i t√™n ƒëƒÉng nh·∫≠p ƒë√£ nh·∫≠p ƒë·ªÉ kh√¥ng ph·∫£i nh·∫≠p l·∫°i
            })

    return render(request, template_name)


@login_required
def seller_dashboard(request):
    return render(request, 'products/seller_dashboard.html')
def search_view(request):
    query = request.GET.get('q', '')
    products = Product.objects.all()
    if query:
        products = products.filter(name__icontains=query)  # T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)

    return render(request, 'products/product_list.html', {
        'products': products,
        'query': query,
    })
    
@login_required
def user_profile(request):
    user = request.user
    return render(request, 'user_profile.html', {'user': user})





